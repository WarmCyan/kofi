#!/bin/python3

"""
Takes any new note expansion syntax, creates the new notes, and replaces syntax in original file.
"""

import sys
import re
import subprocess

from kofi.note import Note
from kofi import util

filename = sys.argv[1]

with open(filename, 'r') as infile:
    lines = infile.readlines()

start_pattern = re.compile("^<!-- <([\w\d\s\-\_]*)\|> -->$")
description_pattern = re.compile("<!-- description: (.*) -->")
tags_pattern = re.compile("<!-- tags: (.*) -->")
end_pattern = re.compile("^<!-- </> -->$")

notes = []
note_stack = []
new_note_found = False # flag for if we need to reload original or not

# parse all the things!
for index, line in enumerate(lines):
    # check if we're starting a new note
    if start_pattern.match(line):
        new_note_found = True
        new_note = Note()
        new_note.start_index = index

        # get the name
        new_note.data["name"] = start_pattern.match(line).group(1)
        new_note.data["date-created"] = ""
        new_note.data["date-updated"] = ""
        new_note.data["description"] = ""
        new_note.data["tags"] = ""
        
        # add to stack
        note_stack.append(new_note)

    # check if we found the end of this note
    elif end_pattern.match(line) and len(note_stack) > 0:
        note_stack[-1].end_index = index
        finished_note = note_stack.pop()
        notes.append(finished_note)

    # check if it's a description line
    elif description_pattern.match(line) and len(note_stack) > 0:
        note_stack[-1].data["description"] = description_pattern.match(line).group(1)
        
    # check if it's a tag line
    elif tags_pattern.match(line) and len(note_stack) > 0:
        tags_line = tags_pattern.match(line).group(1)
        tags = util.from_tag_string(tags_line)
        note_stack[-1].data["tags"] = tags

    # normal lines of this new note for creation
    elif len(note_stack) > 0:
        note_stack[-1].content.append(line)


# create each note and write to it
for n in notes:
    #name = subprocess.run(["new-note"], shell=True, stdout=subprocess.PIPE).stdout.decode('ascii')
    #name = subprocess.run(["new-note"], stdout=subprocess.PIPE).stdout.decode('ascii').rstrip()
    name = util.run_shell("new-note")

    # load from that new filename just so we get the date stuff
    created_note = Note()
    created_note.load(name)
    
    # NOTE: I realize this is just weird, but it works, we have a separate ""note object"" that is the existing one and we just manually merge the stuff we need, and write from the new note
    n.data["date-created"] = created_note.data["date-created"]
    n.data["date-updated"] = created_note.data["date-updated"]
    
    n.filename = name
    n.write()

if new_note_found:
    # replace each note expansion with proper syntax
    for n in notes:
        start_line = lines[n.start_index]

        name_replace = n.data["name"]
        filename_replace = n.filename

        lines[n.start_index] = f"<!-- <{name_replace}|{filename_replace}> -->\n"
        lines[n.end_index] = f"<!-- </{name_replace}|{filename_replace}> -->\n"
        
    # write it back out!
    with open(filename, 'w') as outfile:
        outfile.writelines(lines)
